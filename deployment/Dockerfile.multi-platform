# Ultra-Optimized Multi-Platform Dockerfile for SF Business Model
# Targets: Mac M1/M2 (ARM64), Intel Mac (AMD64), Windows (WSL2)
# Size Target: <1.5GB (from 4.84GB original)

ARG TARGETPLATFORM
ARG BUILDPLATFORM

# ============================================================================
# Dependencies Stage - Build-only dependencies
# ============================================================================
FROM --platform=$TARGETPLATFORM python:3.11-slim as dependencies

RUN echo "Building for $TARGETPLATFORM on $BUILDPLATFORM"

# Install minimal build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc g++ \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# Set working directory
WORKDIR /app

# Copy and install Python dependencies to user directory
COPY requirements-optimized.txt .
RUN pip install --user --no-cache-dir --no-compile \
    --disable-pip-version-check \
    -r requirements-optimized.txt

# Remove pip cache and unnecessary files
RUN find /root/.local -name "*.pyc" -delete \
    && find /root/.local -name "__pycache__" -type d -exec rm -rf {} + \
    && find /root/.local -name "*.pyo" -delete

# ============================================================================
# Production Stage - Ultra-minimal runtime
# ============================================================================
FROM --platform=$TARGETPLATFORM python:3.11-slim as production

# Copy Python packages from dependencies stage to home directory for appuser
COPY --from=dependencies /root/.local /home/appuser/.local

# Add Python user packages to PATH
ENV PATH="/home/appuser/.local/bin:$PATH"

# Install only essential runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/* \
    && rm -rf /usr/share/doc/* \
    && rm -rf /usr/share/man/* \
    && rm -rf /usr/share/locale/*

# Set optimized environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONOPTIMIZE=2 \
    PIP_NO_CACHE_DIR=1 \
    PATH=/root/.local/bin:$PATH \
    STREAMLIT_SERVER_HEADLESS=true \
    STREAMLIT_SERVER_ENABLE_CORS=false \
    STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=false \
    STREAMLIT_BROWSER_GATHER_USAGE_STATS=false \
    STREAMLIT_SERVER_FILE_WATCHER_TYPE=none

# Create application user for security
RUN groupadd -r appuser && useradd -r -g appuser -s /bin/false appuser

# Set working directory
WORKDIR /app

# Copy only essential application files (optimized order for Docker layer caching)
COPY --chown=appuser:appuser app/business_dashboard.py app/
COPY --chown=appuser:appuser app/components/ app/components/
COPY --chown=appuser:appuser app/utils/ app/utils/

# Create minimal required directories
RUN mkdir -p /app/data/models /app/processed/final /app/logs \
    && mkdir -p /home/appuser \
    && chown -R appuser:appuser /app /home/appuser

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8501

# Optimized health check
HEALTHCHECK --interval=60s --timeout=20s --start-period=120s --retries=2 \
    CMD curl -f http://localhost:8501/_stcore/health > /dev/null 2>&1 || exit 1

# Multi-platform optimized startup
CMD ["python", "-m", "streamlit", "run", "app/business_dashboard.py", \
     "--server.port=8501", \
     "--server.address=0.0.0.0", \
     "--server.maxUploadSize=10", \
     "--server.maxMessageSize=50", \
     "--logger.level=warning"]