name: CI/CD Pipeline

on:
  # Run on pushes to main branch
  push:
    branches: [ main ]
  
  # Run pull requests
  pull_request:
    branches: [ main ]
  
  # Run monthly on first Sunday at 2 AM UTC
  schedule:
    - cron: '0 2 * * 0'  # Every Sunday at 2 AM UTC
  
  # Allow manual trigger
  workflow_dispatch:

env:
  DOCKER_IMAGE: esengendo730/sanfrancisco_business_model
  DOCKER_PLATFORM: linux/amd64,linux/arm64

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements.txt
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-and-deploy:
    name: Build and Deploy Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=schedule,pattern={{date 'YYYYMMDD'}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/Dockerfile.multi-platform
        platforms: ${{ env.DOCKER_PLATFORM }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Update Docker Hub description
      uses: peter-evans/dockerhub-description@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.DOCKER_IMAGE }}
        readme-filepath: ./README.md

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_IMAGE }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    
    steps:
    - name: Test Docker image
      run: |
        # Pull and test the latest image
        docker pull ${{ env.DOCKER_IMAGE }}:latest
        
        # Run container in background
        docker run -d -p 8501:8501 --name sf-business-test ${{ env.DOCKER_IMAGE }}:latest
        
        # Wait for container to start
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8501/_stcore/health || exit 1
        
        # Test main page loads
        curl -f http://localhost:8501/ || exit 1
        
        # Cleanup
        docker stop sf-business-test
        docker rm sf-business-test
        
        echo "‚úÖ Docker image health check passed!"

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [test, build-and-deploy, health-check]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
    
    steps:
    - name: Deployment Status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build-and-deploy.result }}" == "success" && "${{ needs.health-check.result }}" == "success" ]]; then
          echo "üöÄ Deployment successful! Image available at: ${{ env.DOCKER_IMAGE }}:latest"
          echo "üìä Dashboard accessible via: docker run -p 8501:8501 ${{ env.DOCKER_IMAGE }}:latest"
        else
          echo "‚ùå Deployment failed. Check the logs above."
          exit 1
        fi