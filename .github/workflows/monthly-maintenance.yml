name: Monthly Maintenance

on:
  # Run on first Sunday of every month at 6 AM UTC
  schedule:
    - cron: '0 6 1-7 * 0'  # First Sunday of month at 6 AM UTC
  
  # Allow manual trigger
  workflow_dispatch:

jobs:
  dependency-update:
    name: Update Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Check for dependency updates
      run: |
        pip install pip-tools
        pip-compile requirements-optimized.txt --upgrade --output-file requirements-updated.txt
        
        # Compare files
        if ! cmp -s requirements-optimized.txt requirements-updated.txt; then
          echo "📦 Dependencies can be updated:"
          diff requirements-optimized.txt requirements-updated.txt || true
          echo "UPDATES_AVAILABLE=true" >> $GITHUB_ENV
        else
          echo "✅ All dependencies are up to date"
          echo "UPDATES_AVAILABLE=false" >> $GITHUB_ENV
        fi
    
    - name: Create Pull Request for dependency updates
      if: env.UPDATES_AVAILABLE == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "📦 Update dependencies (monthly maintenance)"
        title: "📦 Monthly Dependency Updates"
        body: |
          ## 📦 Monthly Dependency Updates
          
          This PR contains dependency updates from the monthly maintenance workflow.
          
          ### Changes
          - Updated Python package versions to latest compatible versions
          - Security patches and bug fixes included
          
          ### Testing
          - [ ] All tests pass
          - [ ] Docker build successful
          - [ ] Manual testing completed
          
          **Auto-generated by monthly maintenance workflow**
        branch: maintenance/monthly-dependencies
        delete-branch: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements-optimized.txt
    
    - name: Run safety check
      run: |
        echo "🔒 Running safety check for known vulnerabilities..."
        safety check --json --output safety-report.json || true
        
        if [ -f safety-report.json ]; then
          echo "Safety report generated"
          cat safety-report.json
        fi
    
    - name: Run bandit security scan
      run: |
        echo "🔍 Running bandit security scan..."
        bandit -r app/ src/ -f json -o bandit-report.json || true
        
        if [ -f bandit-report.json ]; then
          echo "Bandit report generated"
          cat bandit-report.json
        fi
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build test image
      run: |
        docker build -f deployment/Dockerfile.multi-platform -t sf-business-test:latest .
    
    - name: Run performance tests
      run: |
        echo "🚀 Starting performance tests..."
        
        # Start container
        docker run -d -p 8501:8501 --name sf-perf-test sf-business-test:latest
        
        # Wait for startup
        sleep 45
        
        # Test startup time and response
        start_time=$(date +%s)
        
        # Test health endpoint response time
        curl -w "@-" -o /dev/null -s http://localhost:8501/_stcore/health << 'EOF'
        time_total: %{time_total}s\n
        time_connect: %{time_connect}s\n
        time_starttransfer: %{time_starttransfer}s\n
        http_code: %{http_code}\n
        EOF
        
        # Test main page load time
        echo "Testing main page load time:"
        curl -w "@-" -o /dev/null -s http://localhost:8501/ << 'EOF'
        time_total: %{time_total}s\n
        time_connect: %{time_connect}s\n
        time_starttransfer: %{time_starttransfer}s\n
        http_code: %{http_code}\n
        EOF
        
        # Check memory usage
        echo "Container resource usage:"
        docker stats sf-perf-test --no-stream
        
        # Cleanup
        docker stop sf-perf-test
        docker rm sf-perf-test
        
        echo "✅ Performance tests completed"

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [dependency-update, security-audit, performance-test]
    if: always()
    
    steps:
    - name: Docker Hub cleanup
      run: |
        echo "🧹 Monthly cleanup completed"
        echo "Note: Manual cleanup of old Docker tags may be needed on Docker Hub"
        echo "Current image: esengendo730/sf-business-model:latest"
        
    - name: Maintenance summary
      run: |
        echo "📋 Monthly Maintenance Summary"
        echo "=============================="
        echo "- Dependency check: ${{ needs.dependency-update.result }}"
        echo "- Security audit: ${{ needs.security-audit.result }}"
        echo "- Performance test: ${{ needs.performance-test.result }}"
        echo "- Date: $(date)"
        echo "=============================="